package com.example.rekognizeme;import androidx.activity.result.ActivityResult;import androidx.activity.result.ActivityResultCallback;import androidx.activity.result.ActivityResultLauncher;import androidx.activity.result.contract.ActivityResultContracts;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.Manifest;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.provider.MediaStore;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.ml.vision.FirebaseVision;import com.google.firebase.ml.vision.common.FirebaseVisionImage;import com.google.firebase.ml.vision.label.FirebaseVisionImageLabel;import com.google.firebase.ml.vision.label.FirebaseVisionImageLabeler;import com.google.mlkit.vision.common.InputImage;import com.google.mlkit.vision.label.ImageLabel;import com.google.mlkit.vision.label.ImageLabeler;import com.google.mlkit.vision.label.ImageLabeling;import com.google.mlkit.vision.label.defaults.ImageLabelerOptions;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity {    public static final int CAMERA_PERMISSION_CODE = 48;    public static final int GALLERY_PERMISSION_CODE = 49;    private static final String TAG = "Tag";    ImageView captureImage, cameraBtn, galleryBtn ;    Button analyseBtn;    Bitmap bitmapImage;    TextView textResult;    ProgressBar progressBar;    RecyclerView analyseResult;    SearchAdapter searchAdapter;    String title, link, displayed_link, snippet;    ActivityResultLauncher<Intent> launchCamera;    ActivityResultLauncher<Intent> launchGallery;    InputImage image;    ImageLabeler labeler;    private ArrayList<SearchResult> searchResultArrayList;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        cameraBtn = findViewById(R.id.cameraBtn);        galleryBtn = findViewById(R.id.galleryBtn);        captureImage = findViewById(R.id.captureImage);        textResult = findViewById(R.id.resultText);        progressBar = findViewById(R.id.progressBar);        analyseBtn = findViewById(R.id.analyseBtn);        analyseResult = findViewById(R.id.analyseResults);        labeler = ImageLabeling.getClient(ImageLabelerOptions.DEFAULT_OPTIONS);        searchResultArrayList = new ArrayList<>();        searchAdapter = new SearchAdapter(this, searchResultArrayList);        analyseResult.setAdapter(searchAdapter);        analyseResult.setLayoutManager(new LinearLayoutManager(MainActivity.this,LinearLayoutManager.HORIZONTAL,false));        cameraBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                searchResultArrayList.clear();                searchAdapter.notifyDataSetChanged();                openCamera();            }        });        //CAMERA LAUNCHER        launchCamera = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {            @Override            public void onActivityResult(ActivityResult result) {                Intent data = result.getData();                try{                    bitmapImage = (Bitmap) data.getExtras().get("data");                    captureImage.setImageBitmap(bitmapImage);                    image = InputImage.fromBitmap(bitmapImage, 0);                    processImage();                }catch (Exception exception){                    Log.d(TAG, "onActivityResult: " + exception.getMessage());                }            }        });        galleryBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                searchResultArrayList.clear();                searchAdapter.notifyDataSetChanged();                openGallery();            }        });        //GALLERY LAUNCHER        launchGallery = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {            @Override            public void onActivityResult(ActivityResult result) {                Intent data  = result.getData();                try{                    image = InputImage.fromFilePath(MainActivity.this,data.getData());                    captureImage.setImageURI(data.getData());                    processImage();                }catch (Exception exception){                    Log.d(TAG, "onActivityResult: " + exception.getMessage());                }            }        });        analyseBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                searchResultArrayList.clear();                searchAdapter.notifyDataSetChanged();                progressBar.setVisibility(View.VISIBLE);                analyseImage();                analyseGalleryImage();            }        });    }    //OPEN CAMERA    private void openCamera() {        Intent camera = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);        launchCamera.launch(camera);    }    //OPEN GALLERY    private void openGallery() {        Intent gallery = new Intent();        gallery.setType("image/*");        gallery.setAction(Intent.ACTION_GET_CONTENT);        launchGallery.launch(gallery);    }    private void processImage() {        labeler.process(image).addOnSuccessListener(new OnSuccessListener<List<ImageLabel>>() {            @Override            public void onSuccess(@NonNull List<ImageLabel> imageLabels) {                String result = "";                for(ImageLabel label : imageLabels){                    result = result+label.getText()+" - ";                }                textResult.setText(result);            }        })        .addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {                Log.d(TAG, "onFailure: "+e.getMessage());            }        });    }    @Override    protected void onResume() {        super.onResume();        checkPermission(Manifest.permission.CAMERA, CAMERA_PERMISSION_CODE);    }    //SEARCH IMAGE CONTENT USING FIREBASE_VISION    private void analyseImage(){        FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(bitmapImage);        FirebaseVisionImageLabeler labeler = FirebaseVision.getInstance().getOnDeviceImageLabeler();        labeler.processImage(image).addOnSuccessListener(new OnSuccessListener<List<FirebaseVisionImageLabel>>() {            @Override            public void onSuccess(List<FirebaseVisionImageLabel> firebaseVisionImageLabels) {                String analyseQuery = firebaseVisionImageLabels.get(0).getText();                getSearchResults(analyseQuery);            }        }).addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {                Toast.makeText(MainActivity.this,"Failed to recognize the image..",Toast.LENGTH_SHORT).show();            }        });    }    //SEARCH IMAGE CONTENT USING FIREBASE_VISION    private void analyseGalleryImage(){        try {            FirebaseVisionImage image = FirebaseVisionImage.fromFilePath(MainActivity.this, Uri.fromFile(new File("image/*")));            FirebaseVisionImageLabeler labeler = FirebaseVision.getInstance().getOnDeviceImageLabeler();            labeler.processImage(image).addOnSuccessListener(new OnSuccessListener<List<FirebaseVisionImageLabel>>() {                @Override                public void onSuccess(List<FirebaseVisionImageLabel> firebaseVisionImageLabels) {                    String analyseQuery = firebaseVisionImageLabels.get(0).getText();                    getSearchResults(analyseQuery);                }            }).addOnFailureListener(new OnFailureListener() {                @Override                public void onFailure(@NonNull Exception e) {                    Toast.makeText(MainActivity.this,"Failed to recognize the image..",Toast.LENGTH_SHORT).show();                }            });        } catch (IOException e) {            e.printStackTrace();        }    }    //JSON PARSING USING VOLLEY    private  void getSearchResults(String analyseQuery){        String url = "https://serpapi.com/search.json?engine=google&q="+analyseQuery+"&location=United+States&google_domain=google.com&gl=au&hl=en&api_key=50c2120a9052dfa8d4b439bf8b1be6f6e45761a3f4834824243033ced3d13a5a";        RequestQueue queue = Volley.newRequestQueue((MainActivity.this));        //Making a JSON object request        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url, null, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                //JSON parsing                progressBar.setVisibility((View.GONE));                try{                    JSONArray jsonArray = response.getJSONArray("organic_results");                    for(int i=0; i<jsonArray.length(); i++){                        JSONObject jsonObject = jsonArray.getJSONObject(i);                        if(jsonObject.has("title")){                            title = jsonObject.getString("title");                        }                        if(jsonObject.has("link")){                            link = jsonObject.getString("link");                        }                        if(jsonObject.has("displayed_link")){                            displayed_link = jsonObject.getString("displayed_link");                        }                        if(jsonObject.has("snippet")){                            snippet = jsonObject.getString("snippet");                        }                        searchResultArrayList.add(new SearchResult(title, link, displayed_link, snippet));                    }                    searchAdapter.notifyDataSetChanged();                }catch (JSONException exception){                    exception.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Toast.makeText(MainActivity.this,"Failed to get the search results..", Toast.LENGTH_SHORT).show();            }        });        //Adding JSON object request to queue        queue.add(jsonObjectRequest);    }    public void checkPermission(String permission, int requestCode){        if(ContextCompat.checkSelfPermission(MainActivity.this,permission) == PackageManager.PERMISSION_DENIED){            ActivityCompat.requestPermissions(MainActivity.this, new String[] {permission}, requestCode);        }    }    //REQUEST PERMISSION FUNCTION FOR CAMERA & GALLERY    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        switch (requestCode) {            case GALLERY_PERMISSION_CODE:{                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    openGallery();                }else{                    Toast.makeText(this,"Gallery Permission Denied!", Toast.LENGTH_SHORT).show();                }            }            case CAMERA_PERMISSION_CODE:{                if(grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){                    openCamera();                }else{                    Toast.makeText(this,"Camera Permission Denied!", Toast.LENGTH_SHORT).show();                }            }        }    }}